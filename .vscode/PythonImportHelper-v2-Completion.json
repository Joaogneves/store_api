[
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_serializer",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "AfterValidator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "store.core.exceptions",
        "description": "store.core.exceptions",
        "isExtraImport": true,
        "detail": "store.core.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "store.core.exceptions",
        "description": "store.core.exceptions",
        "isExtraImport": true,
        "detail": "store.core.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "store.core.exceptions",
        "description": "store.core.exceptions",
        "isExtraImport": true,
        "detail": "store.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ProductIn",
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "isExtraImport": true,
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductOut",
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "isExtraImport": true,
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductUpdate",
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "isExtraImport": true,
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductUpdateOut",
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "isExtraImport": true,
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductIn",
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "isExtraImport": true,
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductIn",
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "isExtraImport": true,
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductOut",
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "isExtraImport": true,
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductUpdate",
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "isExtraImport": true,
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductUpdateOut",
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "isExtraImport": true,
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductIn",
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "isExtraImport": true,
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductOut",
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "isExtraImport": true,
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductUpdateOut",
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "isExtraImport": true,
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductIn",
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "isExtraImport": true,
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductUpdate",
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "isExtraImport": true,
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductUsecase",
        "importPath": "store.usecases.product",
        "description": "store.usecases.product",
        "isExtraImport": true,
        "detail": "store.usecases.product",
        "documentation": {}
    },
    {
        "label": "product_usecase",
        "importPath": "store.usecases.product",
        "description": "store.usecases.product",
        "isExtraImport": true,
        "detail": "store.usecases.product",
        "documentation": {}
    },
    {
        "label": "product_usecase",
        "importPath": "store.usecases.product",
        "description": "store.usecases.product",
        "isExtraImport": true,
        "detail": "store.usecases.product",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorClient",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorClient",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorDatabase",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "store.core.config",
        "description": "store.core.config",
        "isExtraImport": true,
        "detail": "store.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "store.core.config",
        "description": "store.core.config",
        "isExtraImport": true,
        "detail": "store.core.config",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "Decimal128",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "Decimal128",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "Decimal128",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "CreateBaseModel",
        "importPath": "store.models.base",
        "description": "store.models.base",
        "isExtraImport": true,
        "detail": "store.models.base",
        "documentation": {}
    },
    {
        "label": "BaseSchemaMixin",
        "importPath": "store.schemas.base",
        "description": "store.schemas.base",
        "isExtraImport": true,
        "detail": "store.schemas.base",
        "documentation": {}
    },
    {
        "label": "OutSchema",
        "importPath": "store.schemas.base",
        "description": "store.schemas.base",
        "isExtraImport": true,
        "detail": "store.schemas.base",
        "documentation": {}
    },
    {
        "label": "pymongo",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymongo",
        "description": "pymongo",
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "db_client",
        "importPath": "store.db.mongo",
        "description": "store.db.mongo",
        "isExtraImport": true,
        "detail": "store.db.mongo",
        "documentation": {}
    },
    {
        "label": "db_client",
        "importPath": "store.db.mongo",
        "description": "store.db.mongo",
        "isExtraImport": true,
        "detail": "store.db.mongo",
        "documentation": {}
    },
    {
        "label": "ProductModel",
        "importPath": "store.models.product",
        "description": "store.models.product",
        "isExtraImport": true,
        "detail": "store.models.product",
        "documentation": {}
    },
    {
        "label": "api_router",
        "importPath": "store.routers",
        "description": "store.routers",
        "isExtraImport": true,
        "detail": "store.routers",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "store.controllers.product",
        "description": "store.controllers.product",
        "isExtraImport": true,
        "detail": "store.controllers.product",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "product_data",
        "importPath": "tests.factories",
        "description": "tests.factories",
        "isExtraImport": true,
        "detail": "tests.factories",
        "documentation": {}
    },
    {
        "label": "product_data",
        "importPath": "tests.factories",
        "description": "tests.factories",
        "isExtraImport": true,
        "detail": "tests.factories",
        "documentation": {}
    },
    {
        "label": "product_data",
        "importPath": "tests.factories",
        "description": "tests.factories",
        "isExtraImport": true,
        "detail": "tests.factories",
        "documentation": {}
    },
    {
        "label": "products_data",
        "importPath": "tests.factories",
        "description": "tests.factories",
        "isExtraImport": true,
        "detail": "tests.factories",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "store.controllers.product",
        "description": "store.controllers.product",
        "peekOfCode": "router = APIRouter(tags=[\"products\"])\n@router.post(path=\"/\", status_code=status.HTTP_201_CREATED)\nasync def post(\n    body: ProductIn = Body(...), usecase: ProductUsecase = Depends()\n) -> ProductOut:\n    try:\n        return await usecase.create(body=body)\n    except Exception as exc:\n        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=exc.message)\n@router.get(path=\"/{id}\", status_code=status.HTTP_200_OK)",
        "detail": "store.controllers.product",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "store.core.config",
        "description": "store.core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    PROJECT_NAME: str = \"Store API\"\n    ROOT_PATH: str = \"/\"\n    DATABASE_URL: str\n    model_config = SettingsConfigDict(env_file=\".env\")\nsettings = Settings()",
        "detail": "store.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "store.core.config",
        "description": "store.core.config",
        "peekOfCode": "settings = Settings()",
        "detail": "store.core.config",
        "documentation": {}
    },
    {
        "label": "BaseException",
        "kind": 6,
        "importPath": "store.core.exceptions",
        "description": "store.core.exceptions",
        "peekOfCode": "class BaseException(Exception):\n    message: str = \"Internal Server Error\"\n    def __init__(self, message: str | None = None) -> None:\n        if message:\n            self.message = message\nclass NotFoundException(BaseException):\n    message = \"Not Found\"",
        "detail": "store.core.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "kind": 6,
        "importPath": "store.core.exceptions",
        "description": "store.core.exceptions",
        "peekOfCode": "class NotFoundException(BaseException):\n    message = \"Not Found\"",
        "detail": "store.core.exceptions",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "kind": 6,
        "importPath": "store.db.mongo",
        "description": "store.db.mongo",
        "peekOfCode": "class MongoClient:\n    def __init__(self) -> None:\n        self.client: AsyncIOMotorClient = AsyncIOMotorClient(settings.DATABASE_URL)\n    def get(self) -> AsyncIOMotorClient:\n        return self.client\ndb_client = MongoClient()",
        "detail": "store.db.mongo",
        "documentation": {}
    },
    {
        "label": "db_client",
        "kind": 5,
        "importPath": "store.db.mongo",
        "description": "store.db.mongo",
        "peekOfCode": "db_client = MongoClient()",
        "detail": "store.db.mongo",
        "documentation": {}
    },
    {
        "label": "CreateBaseModel",
        "kind": 6,
        "importPath": "store.models.base",
        "description": "store.models.base",
        "peekOfCode": "class CreateBaseModel(BaseModel):\n    id: UUID4 = Field(default_factory=uuid.uuid4)\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n    updated_at: datetime = Field(default_factory=datetime.utcnow)\n    @model_serializer\n    def set_model(self) -> dict[str, Any]:\n        self_dict = dict(self)\n        for key, value in self_dict.items():\n            if isinstance(value, Decimal):\n                self_dict[key] = Decimal128(str(value))",
        "detail": "store.models.base",
        "documentation": {}
    },
    {
        "label": "ProductModel",
        "kind": 6,
        "importPath": "store.models.product",
        "description": "store.models.product",
        "peekOfCode": "class ProductModel(ProductIn, CreateBaseModel):\n    ...",
        "detail": "store.models.product",
        "documentation": {}
    },
    {
        "label": "BaseSchemaMixin",
        "kind": 6,
        "importPath": "store.schemas.base",
        "description": "store.schemas.base",
        "peekOfCode": "class BaseSchemaMixin(BaseModel):\n    class Config:\n        from_attributes = True\nclass OutSchema(BaseModel):\n    id: UUID4 = Field()\n    created_at: datetime = Field()\n    updated_at: datetime = Field()\n    @model_validator(mode=\"before\")\n    def set_schema(cls, data):\n        for key, value in data.items():",
        "detail": "store.schemas.base",
        "documentation": {}
    },
    {
        "label": "OutSchema",
        "kind": 6,
        "importPath": "store.schemas.base",
        "description": "store.schemas.base",
        "peekOfCode": "class OutSchema(BaseModel):\n    id: UUID4 = Field()\n    created_at: datetime = Field()\n    updated_at: datetime = Field()\n    @model_validator(mode=\"before\")\n    def set_schema(cls, data):\n        for key, value in data.items():\n            if isinstance(value, Decimal128):\n                data[key] = Decimal(str(value))\n        return data",
        "detail": "store.schemas.base",
        "documentation": {}
    },
    {
        "label": "ProductBase",
        "kind": 6,
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "peekOfCode": "class ProductBase(BaseSchemaMixin):\n    name: str = Field(..., description=\"Product name\")\n    quantity: int = Field(..., description=\"Product quantity\")\n    price: Decimal = Field(..., description=\"Product price\")\n    status: bool = Field(..., description=\"Product status\")\nclass ProductIn(ProductBase, BaseSchemaMixin):\n    ...\nclass ProductOut(ProductIn, OutSchema):\n    ...\ndef convert_decimal_128(v):",
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductIn",
        "kind": 6,
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "peekOfCode": "class ProductIn(ProductBase, BaseSchemaMixin):\n    ...\nclass ProductOut(ProductIn, OutSchema):\n    ...\ndef convert_decimal_128(v):\n    return Decimal128(str(v))\nDecimal_ = Annotated[Decimal, AfterValidator(convert_decimal_128)]\nclass ProductUpdate(BaseSchemaMixin):\n    quantity: Optional[int] = Field(None, description=\"Product quantity\")\n    price: Optional[Decimal_] = Field(None, description=\"Product price\")",
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductOut",
        "kind": 6,
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "peekOfCode": "class ProductOut(ProductIn, OutSchema):\n    ...\ndef convert_decimal_128(v):\n    return Decimal128(str(v))\nDecimal_ = Annotated[Decimal, AfterValidator(convert_decimal_128)]\nclass ProductUpdate(BaseSchemaMixin):\n    quantity: Optional[int] = Field(None, description=\"Product quantity\")\n    price: Optional[Decimal_] = Field(None, description=\"Product price\")\n    status: Optional[bool] = Field(None, description=\"Product status\")\nclass ProductUpdateOut(ProductOut):",
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductUpdate",
        "kind": 6,
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "peekOfCode": "class ProductUpdate(BaseSchemaMixin):\n    quantity: Optional[int] = Field(None, description=\"Product quantity\")\n    price: Optional[Decimal_] = Field(None, description=\"Product price\")\n    status: Optional[bool] = Field(None, description=\"Product status\")\nclass ProductUpdateOut(ProductOut):\n    ...",
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductUpdateOut",
        "kind": 6,
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "peekOfCode": "class ProductUpdateOut(ProductOut):\n    ...",
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "convert_decimal_128",
        "kind": 2,
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "peekOfCode": "def convert_decimal_128(v):\n    return Decimal128(str(v))\nDecimal_ = Annotated[Decimal, AfterValidator(convert_decimal_128)]\nclass ProductUpdate(BaseSchemaMixin):\n    quantity: Optional[int] = Field(None, description=\"Product quantity\")\n    price: Optional[Decimal_] = Field(None, description=\"Product price\")\n    status: Optional[bool] = Field(None, description=\"Product status\")\nclass ProductUpdateOut(ProductOut):\n    ...",
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "Decimal_",
        "kind": 5,
        "importPath": "store.schemas.product",
        "description": "store.schemas.product",
        "peekOfCode": "Decimal_ = Annotated[Decimal, AfterValidator(convert_decimal_128)]\nclass ProductUpdate(BaseSchemaMixin):\n    quantity: Optional[int] = Field(None, description=\"Product quantity\")\n    price: Optional[Decimal_] = Field(None, description=\"Product price\")\n    status: Optional[bool] = Field(None, description=\"Product status\")\nclass ProductUpdateOut(ProductOut):\n    ...",
        "detail": "store.schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductUsecase",
        "kind": 6,
        "importPath": "store.usecases.product",
        "description": "store.usecases.product",
        "peekOfCode": "class ProductUsecase:\n    def __init__(self) -> None:\n        self.client: AsyncIOMotorClient = db_client.get()\n        self.database: AsyncIOMotorDatabase = self.client.get_database()\n        self.collection = self.database.get_collection(\"products\")\n    async def create(self, body: ProductIn) -> ProductOut:\n        product_model = ProductModel(**body.model_dump())\n        await self.collection.insert_one(product_model.model_dump())\n        return ProductOut(**product_model.model_dump())\n    async def get(self, id: UUID) -> ProductOut:",
        "detail": "store.usecases.product",
        "documentation": {}
    },
    {
        "label": "product_usecase",
        "kind": 5,
        "importPath": "store.usecases.product",
        "description": "store.usecases.product",
        "peekOfCode": "product_usecase = ProductUsecase()",
        "detail": "store.usecases.product",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "store.main",
        "description": "store.main",
        "peekOfCode": "class App(FastAPI):\n    def __init__(self, *args, **kwargs) -> None:\n        super().__init__(\n            *args,\n            **kwargs,\n            version=\"0.0.1\",\n            title=settings.PROJECT_NAME,\n            root_path=settings.ROOT_PATH\n        )\napp = App()",
        "detail": "store.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "store.main",
        "description": "store.main",
        "peekOfCode": "app = App()\napp.include_router(api_router)",
        "detail": "store.main",
        "documentation": {}
    },
    {
        "label": "api_router",
        "kind": 5,
        "importPath": "store.routers",
        "description": "store.routers",
        "peekOfCode": "api_router = APIRouter()\napi_router.include_router(product, prefix=\"/products\")",
        "detail": "store.routers",
        "documentation": {}
    },
    {
        "label": "test_schemas_return_success",
        "kind": 2,
        "importPath": "tests.schemas.test_product",
        "description": "tests.schemas.test_product",
        "peekOfCode": "def test_schemas_return_success():\n    data = product_data()\n    product = ProductIn.model_validate(data)\n    assert product.name == \"Iphone 14 Pro Max\"\ndef test_schemas_return_raise():\n    data = {\"name\": \"Iphone 14 Pro Max\", \"quantity\": 10, \"price\": 8.500}\n    with pytest.raises(ValidationError) as err:\n        ProductIn.model_validate(data)\n    assert err.value.errors()[0] == {\n        \"type\": \"missing\",",
        "detail": "tests.schemas.test_product",
        "documentation": {}
    },
    {
        "label": "test_schemas_return_raise",
        "kind": 2,
        "importPath": "tests.schemas.test_product",
        "description": "tests.schemas.test_product",
        "peekOfCode": "def test_schemas_return_raise():\n    data = {\"name\": \"Iphone 14 Pro Max\", \"quantity\": 10, \"price\": 8.500}\n    with pytest.raises(ValidationError) as err:\n        ProductIn.model_validate(data)\n    assert err.value.errors()[0] == {\n        \"type\": \"missing\",\n        \"loc\": (\"status\",),\n        \"msg\": \"Field required\",\n        \"input\": {\"name\": \"Iphone 14 Pro Max\", \"quantity\": 10, \"price\": 8.5},\n        \"url\": \"https://errors.pydantic.dev/2.5/v/missing\",",
        "detail": "tests.schemas.test_product",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def event_loop():\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n@pytest.fixture\ndef mongo_client():\n    return db_client.get()\n@pytest.fixture(autouse=True)\nasync def clear_collections(mongo_client):\n    yield",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "mongo_client",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def mongo_client():\n    return db_client.get()\n@pytest.fixture(autouse=True)\nasync def clear_collections(mongo_client):\n    yield\n    collection_names = await mongo_client.get_database().list_collection_names()\n    for collection_name in collection_names:\n        if collection_name.startswith(\"system\"):\n            continue\n        await mongo_client.get_database()[collection_name].delete_many({})",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "products_url",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def products_url() -> str:\n    return \"/products/\"\n@pytest.fixture\ndef product_id() -> UUID:\n    return UUID(\"fce6cc37-10b9-4a8e-a8b2-977df327001a\")\n@pytest.fixture\ndef product_in(product_id):\n    return ProductIn(**product_data(), id=product_id)\n@pytest.fixture\ndef product_up(product_id):",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "product_id",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def product_id() -> UUID:\n    return UUID(\"fce6cc37-10b9-4a8e-a8b2-977df327001a\")\n@pytest.fixture\ndef product_in(product_id):\n    return ProductIn(**product_data(), id=product_id)\n@pytest.fixture\ndef product_up(product_id):\n    return ProductUpdate(**product_data(), id=product_id)\n@pytest.fixture\nasync def product_inserted(product_in):",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "product_in",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def product_in(product_id):\n    return ProductIn(**product_data(), id=product_id)\n@pytest.fixture\ndef product_up(product_id):\n    return ProductUpdate(**product_data(), id=product_id)\n@pytest.fixture\nasync def product_inserted(product_in):\n    return await product_usecase.create(body=product_in)\n@pytest.fixture\ndef products_in():",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "product_up",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def product_up(product_id):\n    return ProductUpdate(**product_data(), id=product_id)\n@pytest.fixture\nasync def product_inserted(product_in):\n    return await product_usecase.create(body=product_in)\n@pytest.fixture\ndef products_in():\n    return [ProductIn(**product) for product in products_data()]\n@pytest.fixture\nasync def products_inserted(products_in):",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "products_in",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def products_in():\n    return [ProductIn(**product) for product in products_data()]\n@pytest.fixture\nasync def products_inserted(products_in):\n    return [await product_usecase.create(body=product_in) for product_in in products_in]",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "product_data",
        "kind": 2,
        "importPath": "tests.factories",
        "description": "tests.factories",
        "peekOfCode": "def product_data():\n    return {\n        \"name\": \"Iphone 14 Pro Max\",\n        \"quantity\": 10,\n        \"price\": \"8.500\",\n        \"status\": True,\n    }\ndef products_data():\n    return [\n        {\"name\": \"Iphone 11 Pro Max\", \"quantity\": 20, \"price\": \"4.500\", \"status\": True},",
        "detail": "tests.factories",
        "documentation": {}
    },
    {
        "label": "products_data",
        "kind": 2,
        "importPath": "tests.factories",
        "description": "tests.factories",
        "peekOfCode": "def products_data():\n    return [\n        {\"name\": \"Iphone 11 Pro Max\", \"quantity\": 20, \"price\": \"4.500\", \"status\": True},\n        {\"name\": \"Iphone 12 Pro Max\", \"quantity\": 15, \"price\": \"5.500\", \"status\": True},\n        {\"name\": \"Iphone 13 Pro Max\", \"quantity\": 5, \"price\": \"6.500\", \"status\": True},\n        {\"name\": \"Samsung Galaxy S21 Ultra\", \"quantity\": 25, \"price\": \"7.000\", \"status\": True},\n        {\"name\": \"Google Pixel 6 Pro\", \"quantity\": 18, \"price\": \"6.200\", \"status\": True},\n        {\"name\": \"OnePlus 9 Pro\", \"quantity\": 30, \"price\": \"6.800\", \"status\": True},\n        {\"name\": \"Xiaomi Mi 11 Ultra\", \"quantity\": 12, \"price\": \"6.000\", \"status\": True},\n        {\"name\": \"Huawei Mate 40 Pro\", \"quantity\": 8, \"price\": \"5.500\", \"status\": True},",
        "detail": "tests.factories",
        "documentation": {}
    }
]